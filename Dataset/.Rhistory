setwd("~/Desktop/lizzyandshelley")
#set working directory
setwd("~/Desktop/lizzyandshelley") #LIZZY
#open packages
library(here)
library(foreign)
library(labelled)
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#load the data
df <- read.spss("Dataset", "Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#load the data
df <- read.spss(Dataset, "Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
setwd("~/Desktop/lizzyandshelley/Dataset")
#load the data
df <- read.spss("~/Desktop/lizzyandshelley/Dataset/"Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#open packages
library(here)
library(foreign)
library(labelled)
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#get variable labels
attr(df, "variable.labels")
df.labels <- as.data.frame(attr(df, "variable.labels"))
View(df.labels)
View(df.labels)
View(df.labels)
class(df.labels)
names(df.labels)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#open packages
library(here)
library(foreign)
library(labelled)
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#open packages
library(here)
library(foreign)
library(labelled)
library(dplyr)
library(reshape2)
library(lme4)
library(MASS)
knitr::opts_chunk$set(echo = TRUE)
#open packages
library(here)
library(foreign)
library(labelled)
library(dplyr)
library(reshape2)
library(lme4)
library(MASS)
library(mice)
library(biostat3)
library(lmtest)
library(gee)
library(ggplot2)
library(ggpubr)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#setwd("~/GitHub/lizzyandshelley/Dataset")  #SHELLEY
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#get variable labels
attr(df, "variable.labels")
df.labels <- as.data.frame(attr(df, "variable.labels"))
QDSlabels <- data.frame(rownames(df.labels))
df.labels <- cbind(QDSlabels, df.labels)
names(df.labels) <- c("VAR_ID", "description")
rm(QDSlabels)
#USE THIS CODE TO LOOK UP A VARIABLE DESCRIPTION
#df.labels$description[df.labels$VAR_ID=="GENDER"]
#create substance use indicators
# #crack injection
# table(df$CRKINJ, useNA = "ifany")
df$CRKINJ1 <- ifelse(df$CRKINJ1=="No", "No", ifelse(df$CRKINJ1=="Yes", "Yes", NA))
# table(df$CRKINJ1, useNA = "ifany")
# table(df$CRKINJ2, useNA = "ifany")
#
#
# #powder cocaine injection
# table(df$CCINJ, useNA = "ifany")
df$CCINJ1 <- ifelse(df$CCINJ1=="No", "No", ifelse(df$CCINJ1=="Yes", "Yes", NA))
# table(df$CCINJ1, useNA = "ifany")
# table(df$CCINJ2, useNA = "ifany")
#
#
# #meth injection
# table(df$MTINJ, useNA = "ifany")
df$MTINJ1 <- ifelse(df$MTINJ1=="No", "No", ifelse(df$MTINJ1=="Yes", "Yes", NA))
# table(df$MTINJ1, useNA = "ifany")
# table(df$MTINJ2, useNA = "ifany")
#
#injection of prescription stimulants
#table(df$STINJ, useNA = "ifany")
df$STINJ1 <- ifelse(df$STINJ1=="No", "No", ifelse(df$STINJ1=="Yes", "Yes", NA))
#table(df$STINJ1, useNA = "ifany")
#table(df$STINJ2, useNA = "ifany")
# #heroin injection
# table(df$HRINJ, useNA = "ifany")
df$HRINJ1 <- ifelse(df$HRINJ1=="No", "No", ifelse(df$HRINJ1=="Yes", "Yes", NA))
# table(df$HRINJ1, useNA = "ifany")
# table(df$HRINJ2, useNA = "ifany")
# # NMPO injection
# table(df$OPINJ, useNA = "ifany")
df$OPINJ1 <- ifelse(df$OPINJ1=="No", "No", ifelse(df$OPINJ1=="Yes", "Yes", NA))
# table(df$OPINJ1, useNA = "ifany")
# table(df$OPINJ2, useNA = "ifany")
#
# #alcohol
df$ALCDAY <- as.numeric(df$ALCDAY)
df$ALCDAY1 <- as.numeric(df$ALCDAY1)
df$ALCDAY2 <- as.numeric(df$ALCDAY2)
df$ALCTX <- as.numeric(df$ALCTX)
df$ALCTX1 <- as.numeric(df$ALCTX1)
df$ALCTX2 <- as.numeric(df$ALCTX2)
#binge alcohol on a typical day
#binge baseline
df$binge <- ifelse(df$ALCDAY==0, 0, ifelse(df$ALCTX<4, 0, ifelse(df$ALCTX>3, 1, NA)))
#binge FU1
df$binge1 <- ifelse(df$ALCDAY1==0, 0, ifelse(df$ALCTX1<4, 0, ifelse(df$ALCTX1>3, 1, NA)))
#binge FU2
df$binge2 <- ifelse(df$ALCDAY2==0, 0, ifelse(df$ALCTX2<4, 0, ifelse(df$ALCTX2>3, 1, NA)))
#any stimulant injection
#any stimulant injection baseline
df$ANYSTIM <- ifelse(df$CRKINJ=="Yes" | df$CCINJ=="Yes" | df$MTINJ=="Yes" | df$STINJ=="Yes", 1, ifelse(df$CRKINJ=="No" & df$CCINJ=="No" & df$MTINJ=="No" & df$STINJ=="No", 0, NA))
#any stimulant injection FU1
df$ANYSTIM1 <- ifelse(df$CRKINJ1=="Yes" | df$CCINJ1=="Yes" | df$MTINJ1=="Yes" | df$STINJ1=="Yes", 1, ifelse(df$CRKINJ1=="No" & df$CCINJ1=="No" & df$MTINJ1=="No" & df$STINJ1=="No", 0, NA))
#any stimulant injection FU2
df$ANYSTIM2 <- ifelse(df$CRKINJ2=="Yes" | df$CCINJ2=="Yes" | df$MTINJ2=="Yes" | df$STINJ2=="Yes", 1, ifelse(df$CRKINJ2=="No" & df$CCINJ2=="No" & df$MTINJ2=="No" & df$STINJ2=="No", 0, NA))
#any opioid injection
#any opioid injection baseline
df$ANYOPIATE <- ifelse(df$HRINJ=="Yes" | df$OPINJ=="Yes", 1, ifelse(df$HRINJ=="No" & df$OPINJ=="No", 0, NA))
#any opioid injection FU1
df$ANYOPIATE1 <- ifelse(df$HRINJ1=="Yes" | df$OPINJ1=="Yes", 1, ifelse(df$HRINJ1=="No" & df$OPINJ1=="No", 0, NA))
#any opioid injection FU2
df$ANYOPIATE2 <- ifelse(df$HRINJ2=="Yes" | df$OPINJ2=="Yes", 1, ifelse(df$HRINJ2=="No" & df$OPINJ2=="No", 0, NA))
#clean up data types
df$MOSHOME <- as.numeric(paste(df$MOSHOME))
df$MOSHOME1 <- as.numeric(paste(df$MOSHOME1))
df$MOSHOM2 <- as.numeric(paste(df$MOSHOM2))
df$MOSHOME[is.na(df$MOSHOME)] <- 0
df$MOSHOME1[is.na(df$MOSHOME1)] <- 0
df$MOSHOM2[is.na(df$MOSHOM2)] <- 0
df$AGE <- as.numeric(paste(df$AGE))
df$Rshare1 <- factor(df$Rshare1)
#df$HOMELESS <- as.numeric(df$HOMELESS)
df$GENDER[df$GENDER=="Other"] <- "Transgender"
df$GENDER <- droplevels(df$GENDER)
########HAD TO CATEGORIZE AGE BECAUSE NB MODEL WOULDN'T CONVERGE###########
df$AGE_cat <- as.factor(ifelse(df$AGE<25, "y", ifelse(df$AGE>24 & df$AGE<41, "m", ifelse(df$AGE>40, "e", NA))))
#calculate syringe sharing rate
df$RECSHR <- as.numeric(levels(df$RECSHR))[df$RECSHR]
df$RECSHR1 <- as.numeric(levels(df$RECSHR1))[df$RECSHR1]
df$RECSHR2 <- as.numeric(levels(df$RECSHR2))[df$RECSHR2]
shared0 <- sum(df$RECSHR>0, na.rm = TRUE)
shared2 <- sum(df$RECSHR2>0, na.rm = TRUE)
sharerate0 <- (sum(df$RECSHR[df$RECSHR>0], na.rm = TRUE)/shared0)
sharerate2 <- (sum(df$RECSHR2[df$RECSHR2>0], na.rm = TRUE)/shared2)
#create key variables not asked at baseline
df$ARREST <- rep(NA)
df$POLICE <- rep(NA)
df$JAIL <- rep(NA)
#select variables
dfs <- df %>%
dplyr::select("SUBJECT", "FU1", "FU2", "GENDER", "AGE", "AGE_cat", "RACELG", "HOMELESS", "HOMELESS1", "HOMELESS2", "MOSHOME", "MOSHOME1", "MOSHOM2", "RECSHR", "RECSHR1", "RECSHR2", "PUBINJ", "PUBINJ1", "PUBINJ2", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE", "POLICE1", "POLICE2", "ARREST", "ARREST1", "ARREST2", "JAIL", "JAIL1", "JAIL2", "Rshare", "Rshare1", "Rshare2", "binge", "binge1", "binge2", "ANYSTIM", "ANYSTIM1", "ANYSTIM2", "ANYOPIATE", "ANYOPIATE1", "ANYOPIATE2")
#recategorize PUBINJ
dfs$PUBINJ_3cat <- as.factor(ifelse(dfs$PUBINJ=="Never (0% of the time)", 0, ifelse(dfs$PUBINJ=="Occasionally (less than 25% of the time)" | dfs$PUBINJ=="Sometimes (25% to 74% of the time)", 1, ifelse(dfs$PUBINJ=="Usually (75% to 99% of the time)" | dfs$PUBINJ=="Always (100% of the time)", 2, NA))))
dfs$PUBINJ1_3cat <- as.factor(ifelse(dfs$PUBINJ1=="Never (0% of the time)", 0, ifelse(dfs$PUBINJ1=="Occasionally (less than 25% of the time)" | dfs$PUBINJ1=="Sometimes (25% to 74% of the time)", 1, ifelse(dfs$PUBINJ1=="Usually (75% to 99% of the time)" | dfs$PUBINJ1=="Always (100% of the time)", 2, NA))))
dfs$PUBINJ2_3cat <- as.factor(ifelse(dfs$PUBINJ2=="Never (0% of the time)", 0, ifelse(dfs$PUBINJ2=="Occasionally (less than 25% of the time)" | dfs$PUBINJ2=="Sometimes (25% to 74% of the time)", 1, ifelse(dfs$PUBINJ2=="Usually (75% to 99% of the time)" | dfs$PUBINJ2=="Always (100% of the time)", 2, NA))))
#look at missingness
missing <- data.frame(md.pattern(dfs))
#remove subjects with NA for exposure or outcome
dfs <- subset(dfs, SUBJECT!=4394)
dfs <- subset(dfs, SUBJECT!=4457)
dfs <- subset(dfs, SUBJECT!=5055)
dfs <- subset(dfs, SUBJECT!=5267)
dfs <- subset(dfs, SUBJECT!=5276)
dfs <- subset(dfs, SUBJECT!=5277)
# #figure out any additional cases that will be dropped from glms below
# dfsglm <- dfs %>%
#   dplyr::select("SUBJECT", "GENDER", "AGE", "HOMELESS", "MOSHOME", "PUBINJ", "IJWOTH","RECSHR", "binge", "ANYSTIM", "ANYOPIATE")
# dfsglm$SUBJECT[which(! complete.cases(dfsglm))]
#impute missing covariates
impute <- c("SUBJECT", "GENDER", "AGE", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE1", "POLICE2", "ARREST1", "ARREST2", "JAIL1", "JAIL2", "binge", "ANYSTIM", "ANYOPIATE", "binge1", "ANYSTIM1", "ANYOPIATE1", "binge2", "ANYSTIM2", "ANYOPIATE2")
keeps <- c("GENDER", "AGE", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE1", "POLICE2", "ARREST1", "ARREST2", "JAIL1", "JAIL2", "binge", "ANYSTIM", "ANYOPIATE", "binge1", "ANYSTIM1", "ANYOPIATE1", "binge2", "ANYSTIM2", "ANYOPIATE2")
imputation <- mice(dfs[, (names(dfs) %in% impute)], m=5, maxit=5, printFlag=TRUE, seed = 242)
dfs1 <- complete(imputation, 1)
dfs1 <- merge(dfs1, dfs[, !(names(dfs) %in% keeps)], by = "SUBJECT")
dfs2 <- complete(imputation, 2)
dfs2 <- merge(dfs2, dfs[, !(names(dfs) %in% keeps)], by = "SUBJECT")
dfs3 <- complete(imputation, 3)
dfs3 <- merge(dfs3, dfs[, !(names(dfs) %in% keeps)], by = "SUBJECT")
dfs4 <- complete(imputation, 4)
dfs4 <- merge(dfs4, dfs[, !(names(dfs) %in% keeps)], by = "SUBJECT")
dfs5 <- complete(imputation, 5)
dfs5 <- merge(dfs5, dfs[, !(names(dfs) %in% keeps)], by = "SUBJECT")
#reweight sample to address LTFU
I_ABC <- dfs$FU1 == "Yes" & dfs$FU2 == 1
gFU1a <- glm(FU1 ~ RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs1, na.action = na.omit)
gFU1b <- glm(FU1 ~ RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs2, na.action = na.omit)
gFU1c <- glm(FU1 ~ RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs3, na.action = na.omit)
gFU1d <- glm(FU1 ~ RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs4, na.action = na.omit)
gFU1e <- glm(FU1 ~ RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs5, na.action = na.omit)
pFU1a <- predict(gFU1a, type = "response")
pFU1b <- predict(gFU1b, type = "response")
pFU1c <- predict(gFU1c, type = "response")
pFU1d <- predict(gFU1d, type = "response")
pFU1e <- predict(gFU1e, type = "response")
impFU1 <-data.frame(pFU1a, pFU1b, pFU1c, pFU1d, pFU1e)
dfs$pFU1 <- rowMeans(impFU1)
gFU2a <- glm(FU2 ~ FU1 + RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs1, na.action = na.omit)
gFU2b <- glm(FU2 ~ FU1 + RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs2, na.action = na.omit)
gFU2c <- glm(FU2 ~ FU1 + RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs3, na.action = na.omit)
gFU2d <- glm(FU2 ~ FU1 + RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs4, na.action = na.omit)
gFU2e <- glm(FU2 ~ FU1 + RECSHR + PUBINJ_3cat + HOMELESS + IJWOTH + GENDER + AGE + ANYSTIM, family = "binomial", data = dfs5, na.action = na.omit)
pFU2a <- predict(gFU2a, type = "response")
pFU2b <- predict(gFU2b, type = "response")
pFU2c <- predict(gFU2c, type = "response")
pFU2d <- predict(gFU2d, type = "response")
pFU2e <- predict(gFU2e, type = "response")
impFU2 <-data.frame(pFU2a, pFU2b, pFU2c, pFU2d, pFU2e)
dfs$pFU2 <- rowMeans(impFU2)
dfs$w <- I_ABC/(dfs$pFU1 * dfs$pFU2)
rm(gFU1a, gFU1b, gFU1c, gFU1d, gFU1e, gFU2a, gFU2b, gFU2c, gFU2d, gFU2e, pFU1a, pFU1b, pFU1c, pFU1d, pFU1e, pFU2a, pFU2b, pFU2c, pFU2d, pFU2e, impFU1, impFU2)
#select people with no LTFU (complete case)
#dfc <- subset(df, FU2==1 & FU1=="Yes")
#make dataset long format
dfslong <- reshape(dfs, idvar = "SUBJECT", varying = list(c("HOMELESS", "HOMELESS1", "HOMELESS2"), c("MOSHOME", "MOSHOME1", "MOSHOM2"), c("RECSHR", "RECSHR1", "RECSHR2"), c("PUBINJ_3cat", "PUBINJ1_3cat", "PUBINJ2_3cat"), c("IJWOTH", "IJWOTH1", "IJWOTH2"), c("POLICE", "POLICE1", "POLICE2"), c("ARREST", "ARREST1", "ARREST2"), c("JAIL", "JAIL1", "JAIL2"), c("binge", "binge1", "binge2"), c("ANYSTIM", "ANYSTIM1", "ANYSTIM2"), c("ANYOPIATE", "ANYOPIATE1", "ANYOPIATE2")), timevar = "VISIT", v.names = c("HOMELESS", "MOSHOME", "TIMESHARE", "PUBINJ_3cat", "IJWOTH", "POLICE", "ARREST", "JAIL", "binge", "ANYSTIM", "ANYOPIATE"), ids = "SUBJECT", times = c("baseline", "FU1", "FU2"), direction = "long")
#update variable types
dfslong$TIMESHARE <- as.numeric(paste(dfslong$TIMESHARE))
dfslong$POLICE <- as.factor(dfslong$POLICE)
dfslong$ARREST <- as.factor(dfslong$ARREST)
dfslong$JAIL <- as.factor(dfslong$JAIL)
dfslong$VISIT <- as.factor(dfslong$VISIT)
dfslong$MOSHOME <- as.numeric(paste(dfslong$MOSHOME))
dfslong$PUBINJord <- as.numeric(ifelse(dfslong$PUBINJ=="Never (0% of the time)", 0, ifelse(dfslong$PUBINJ=="Occasionally (less than 25% of the time)", 1, ifelse(dfslong$PUBINJ=="Sometimes (25% to 74% of the time)", 2, ifelse(dfslong$PUBINJ=="Usually (75% to 99% of the time)", 3, ifelse(dfslong$PUBINJ=="Always (100% of the time)", 4 ,NA))))))
dfslong$IJWOTHord <- as.numeric(ifelse(dfslong$IJWOTH=="Never (0% of the time)", 0, ifelse(dfslong$IJWOTH=="Occasionally (less than 25% of the time)", 1, ifelse(dfslong$IJWOTH=="Sometimes (25% to 74% of the time)", 2, ifelse(dfslong$IJWOTH=="Usually (75% to 99% of the time)", 3, ifelse(dfslong$IJWOTH=="Always (100% of the time)", 4, NA))))))
dfslong$YRSHOME <- dfslong$MOSHOME/12
modelgee_categorical <- gee(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge, SUBJECT, data = dfslong, family = poisson, corstr = "exchangeable", na.action = na.omit)
summary(modelgee_categorical)
gee.names <- data.frame(names(modelgee_categorical$coefficients))
gee.out <- data.frame(coef(summary(modelgee_categorical)))
gee.out <- data.frame(gee.out, pvalue=2*(1-pnorm(abs(gee.out[,5]))))
gee.out <- data.frame(Predictor=gee.names[,1], Est.GEE=gee.out[,1], RobustSE.GEE=gee.out[,4], pvalue.GEE=gee.out[,6]); gee.out
#poisson
modelpoisson_categorical <- glmer(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), family = "poisson", data = dfslong, na.action = na.omit)
summary(modelpoisson_categorical)
pois.pvalue <- data.frame(summary(modelpoisson_categorical)$coefficients)
pois.est <- data.frame(exp(summary(modelpoisson_categorical)$coefficients))
pois.out <- data.frame(Est.MM.Pois=pois.est[,1], pvalue.MM.Pois=pois.pvalue[,4]); pois.out
poisrand <- as.data.frame(VarCorr(modelpoisson_categorical))
#negative binomial
modelnb_categorical <- glmer.nb(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), data = dfslong, na.action = na.omit)
summary(modelnb_categorical)
NB.pvalue <- data.frame(summary(modelnb_categorical)$coefficients)
NB.est <- data.frame(exp(summary(modelnb_categorical)$coefficients))
NB.out <- data.frame(Est.MM.NB=NB.est[,1], pvalue.MM.NB=NB.pvalue[,4]); NB.out
NBrand <- as.data.frame(VarCorr(modelnb_categorical))
out.all <- data.frame(gee.out, pois.out, NB.out)
out.all <- out.all[-1,]; out.all
library(ggplot2)
fits <- lmlist(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), family = negative.binomial, data = dfslong, na.action = na.omit)
library(lme4)
fits <- lmList(count ~ time | id, data=df)
fits <- lmlist(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), family = negative.binomial, data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), family = negative.binomial, data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial, data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(), data = dfslong, na.action = na.omit)
fits <- lmList(modelnb_categorical, data=dfslong)
summary(modelnb_categorical)
modelnb_categorical$theta
lme4:::getNBdisp(modelnb_categorical)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
class(dfslong$PUBINJ_3cat)
class(dfslong$HOMELESS)
class(dfslong$GENDER)
class(dfslong$AGE)
class(dfslong$ANYSTIM)
class(dfslong$ANYOPIATE)
class(dfslong$binge)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
table(dfs$PUBINJ_3cat)
table(dfslong$PUBINJ_3cat)
table(dfslong$HOMELESS)
table(dfslong$GENDER)
table(dfslong$AGE)
table(dfslong$ANYSTIM)
table(dfslong$ANYOPIATE)
table(dfslong$binge)
table(dfslong$TIMESHARE)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
debug_contr_error2
fits <- lmList(TIMESHARE ~ factor(PUBINJ_3cat) + factor(HOMELESS) + factor(GENDER) + AGE + factor(ANYSTIM) + factor(ANYOPIATE) + factor(binge) | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ factor(PUBINJ_3cat) + factor(HOMELESS) + factor(GENDER) + AGE + factor(ANYSTIM) + factor(ANYOPIATE) + factor(binge) | SUBJECT, family = negative.binomial(0.4646999), data = dfslong)
fits <- lmList(TIMESHARE ~ factor(PUBINJ_3cat) + factor(HOMELESS) + factor(GENDER) + AGE + factor(ANYSTIM) + factor(ANYOPIATE) + factor(binge) | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
fits
fits <- lmList(TIMESHARE ~ factor(PUBINJ_3cat) + factor(HOMELESS) + factor(GENDER) + AGE + factor(ANYSTIM) + factor(ANYOPIATE) + factor(binge) | SUBJECT, family = poisson, data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
summary(dfslong$TIMESHARE)
table(dfslong$TIMESHARE)
table(dfslong$PUBINJ_3cat)
table(dfslong$HOMELESS)
table(dfslong$GENDER)
table(dfslong$AGE)
table(dfslong$ANYSTIM)
table(dfslong$ANYOPIATE)
table(dfslong$binge)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
predict(modelnb_categorical, newdata = dfslong, type = "response")
predict(modelnb_categorical, type = "response")
##new method
fits <- predict(modelnb_categorical, type = "response")
# Get Predicted Values from these fits
predicted_y <- predict(fits, newdata = dfslong)
# Get Predicted Values from these fits
predicted_y <- predict(fits)
##new method
as.data.frame(fits) <- predict(modelnb_categorical, type = "response")
##new method
fits <- predict(modelnb_categorical, type = "response")
fits <- as.data.frame(fits)
# Get Predicted Values from these fits
predicted_y <- predict(fits)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
model_p <-predict(modelnb_categorical)
model_p
?predict_gam
model_p <-predict.glm(modelnb_categorical)
model_p <-predict(modelnb_categorical)
model_p %>%
ggplot(aes(PUBINJ_3cat, fit)) +
geom_smooth_ci(fac)
model_p %>%
ggplot(aes(PUBINJ_3cat, fit))
class(model_p)
model_p <- as.data.frame(model_p)
model_p %>%
ggplot(aes(PUBINJ_3cat, fit))
model_p %>%
ggplot(aes(x=PUBINJ_3cat, y=fit))
modelnb_categorical
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4646999), data = dfslong, na.action = na.omit)
fits
table(fits)
model_p <-predict(modelnb_categorical)
model_p
model_p <- as.data.frame(model_p)
model_p %>%
model_p %>%
ggplot(aes(x=dfslong$PUBINJ_3cat, y=fit))
model_p
head(model_p)
ggplot(aes(x=dfslong$PUBINJ_3cat, y=model_p))
model_p$model_p
predicted_df <- data.frame(dfslong$SUBJECT, dfslong$PUBINJ_3cat, model_p)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = poisson(), data = dfslong, na.action = na.omit)
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, data = dfslong, na.action = na.omit)
#negative binomial
modelnb_categorical <- glmer.nb(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge + (1|SUBJECT), data = dfslong, na.action = na.omit)
fits < lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, data = dfslong, na.action = na.omit)
summary(modelnb_categorical)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4647), data = dfslong, na.action = na.omit)
fits < lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, data = dfslong, na.action = na.omit)
dfslong.complete <- dfslong[!is.na(dfslong)]
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4647), data = dfslong.complete, na.action = na.omit)
dfslong.complete
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4647), data = dfslong, na.action = na.omit)
dfslong.complete <- na.omit(dfslong)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4647), data = dfslong.complete, na.action = na.omit)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + ANYSTIM + ANYOPIATE + binge | SUBJECT, family = negative.binomial(0.4647), data = dfslong, na.action = na.omit)
levels(dfslong$TIMESHARE)
levels(dfslong$PUBINJ_3cat)
levels(dfslong$HOMELESS)
levels(dfslong$GENDER)
levels(dfslong$AGE)
levels(dfslong$ANYSTIM)
#"lme4:::getNBdisp(modelnb_categorical)" gets theta from NB model
#error: Fitting failed for 978 group(s), probably because a factor only had one level: contrasts can be applied only to factors with 2 or more levels
fits <- lmList(TIMESHARE ~ PUBINJ_3cat + HOMELESS + GENDER + AGE + factor(ANYSTIM) + factor(ANYOPIATE) + factor(binge) | SUBJECT, family = negative.binomial(0.4647), data = dfslong, na.action = na.omit)
predict(modelnb_categorical)
