a1 = as.numeric(temporary[1]),
a2 = as.numeric(temporary[2]),
a3 = as.numeric(temporary[3]),
a4 = as.numeric(temporary[4]),
a5 = 1
)
sum_abar[i] <- sum(as.numeric(temporary[1])+ as.numeric(temporary[2]) + as.numeric(temporary[3]) + as.numeric(temporary[4]), na.rm = TRUE)
EY_abar[i] <- mean(df$Y5)
}
#checking linearity
PlottingData <-as.data.frame(cbind(sum_abar, EY_abar))
Plot2 <- ggplot(PlottingData, aes(x = sum_abar, y = EY_abar)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Expected Probability of HCC dependant on number of visits")  +
xlab("Total Number of Visits 2015-2018")+
ylab("Expected Probability of HCC")
Plot2
#Regressing to get beta value
TrueParameterRegression <-lm(EY_abar ~ sum_abar)
summary(TrueParameterRegression)
#PsiF
PsiF <- as.numeric(TrueParameterRegression$coefficients[2])
PsiF
B = 50
estimates_data2 <- matrix(nrow = B, ncol = 3)
colnames(estimates_data2) <- c("Gcomp", "IPTW",  "TMLE")
#version with 4 levels for each A
x <- list(0:1)
abar<- expand.grid(rep(x, 8))
#set n equal to number of rows
n = as.numeric(nrow(df))
n2 <- as.numeric(nrow(abar))
#initialize sumA
sumA= rep(NA, n2)
# initialize regimes with dim n X num Anodes = 4 X num regimes
regimes = array(NA, dim=c(n,8,n2))
#fill in regimes and sumA
for(i in 1:n2){
regimes[,,i] <- matrix(rep(as.numeric(abar[i,]),n), byrow=TRUE, nrow=n)
sumA[i] =rowSums(abar[i,],  na.rm = TRUE)
}
#initialize and define summary measures
summary.measures = array(dim=c(n2,1,1))
dimnames(summary.measures)[[2]]=list("sumA")
summary.measures[,,1]=as.matrix(sumA)
for(b in 1:B){
df <-generate_data(1000)
#define working.msm = character formula for working MSM
working.msm = "Y ~ sumA"
#Turning As into sets of binary indicators-armadillo
#A1 first
df$A11 <- ifelse(df$A1 == 0, 0, NA)
df$A12 <- ifelse(df$A1 == 0, 0, NA)
df$A11 <- ifelse(df$A1 == 1, 1, df$A11)
df$A12 <- ifelse(df$A1 == 1, 0, df$A12)
df$A11 <- ifelse(df$A1 == 2, 0, df$A11)
df$A12 <- ifelse(df$A1 == 2, 1, df$A12)
df$A11 <- ifelse(df$A1 == 3, 1, df$A11)
df$A12 <- ifelse(df$A1 == 3, 1, df$A12)
#creating the A2 indicators
df$A21 <- ifelse(df$A2 == 0, 0, NA)
df$A22 <- ifelse(df$A2 == 0, 0, NA)
df$A21 <- ifelse(df$A2 == 1, 1, df$A21)
df$A22 <- ifelse(df$A2 == 1, 0, df$A22)
df$A21 <- ifelse(df$A2 == 2, 0, df$A21)
df$A22 <- ifelse(df$A2 == 2, 1, df$A22)
df$A21 <- ifelse(df$A2 == 3, 1, df$A21)
df$A22 <- ifelse(df$A2 == 3, 1, df$A22)
#creating the A3 indicators
df$A31 <- ifelse(df$A3 == 0, 0, NA)
df$A32 <- ifelse(df$A3 == 0, 0, NA)
df$A31 <- ifelse(df$A3 == 1, 1, df$A31)
df$A32 <- ifelse(df$A3 == 1, 0, df$A32)
df$A31 <- ifelse(df$A3 == 2, 0, df$A31)
df$A32 <- ifelse(df$A3 == 2, 1, df$A32)
df$A31 <- ifelse(df$A3 == 3, 1, df$A31)
df$A32 <- ifelse(df$A3 == 3, 1, df$A32)
#creating the A4 indicators
df$A41 <- ifelse(df$A4 == 0, 0, NA)
df$A42 <- ifelse(df$A4 == 0, 0, NA)
df$A41 <- ifelse(df$A4 == 1, 1, df$A41)
df$A42 <- ifelse(df$A4 == 1, 0, df$A42)
df$A41 <- ifelse(df$A4 == 2, 0, df$A41)
df$A42 <- ifelse(df$A4 == 2, 1, df$A42)
df$A41 <- ifelse(df$A4 == 3, 1, df$A41)
df$A42 <- ifelse(df$A4 == 3, 1, df$A42)
df <- df %>% dplyr::select(L1, A11, A12,
L2, A21, A22, Y2,
L3, A31, A32, Y3,
L4, A41, A42,Y4,
C5,Y5)
#Rescale Ls
maxL1 <-max(df$L1)
df$L1<-ifelse(is.na(df$L1), NA, (maxL1-df$L1)/maxL1)
maxL2 <-max(df$L2)
df$L2<-ifelse(is.na(df$L2), NA,(maxL2-df$L2)/maxL2)
maxL3 <-max(df$L3,na.rm = T)
df$L3<-ifelse(is.na(df$L3), NA, (maxL3-df$L3)/maxL3)
maxL4 <-max(df$L4, na.rm = T)
df$L4<-ifelse(is.na(df$L4), NA,(maxL4-df$L4)/maxL4)
#estimate parameter using ltmleMSM function-
results2.MSM <- ltmle::ltmleMSM(df,
Anodes= c("A11", "A12",
"A21", "A22",
"A31", "A32",
"A41", "A42" ),
Lnodes = c("L1", "L2", "L3", "L4"),
Ynodes = c("Y2", "Y3", "Y4", "Y5"),
Cnodes = "C5",
working.msm = working.msm,
regimes = regimes,
summary.measures = summary.measures,
msm.weights = NULL,
survivalOutcome = TRUE)
sum.results2.MSM.tmle= summary(results2.MSM, "tmle")
sum.results2.MSM.tmle
sum.results2.MSM.iptw= summary(results2.MSM, "iptw")
sum.results2.MSM.iptw
results2.MSM.g <- ltmle::ltmleMSM(df,
Anodes= c("A11", "A12",
"A21", "A22",
"A31", "A32",
"A41", "A42"),
Lnodes = c("L1", "L2", "L3", "L4"),
Ynodes = c("Y2", "Y3", "Y4", "Y5"),
Cnodes = "C5",
working.msm = working.msm,
regimes = regimes,
summary.measures = summary.measures,
msm.weights = NULL,
survivalOutcome = TRUE,
gcomp = TRUE)
sum.results2.MSM.g = summary(results2.MSM.g, "gcomp")
sum.results2.MSM.g
estimates_data2[b,] <- c(sum.results2.MSM.g$cmat[2,1],
sum.results2.MSM.iptw$cmat[2,1],
sum.results2.MSM.tmle$cmat[2,1])
print(B)
}
load("SingleLTMLERun112119.Rdata")
estimates_data2
#Turning observed data into something that we can analyze
O <- as.data.frame(matrix(nrow=nrow(HCVData), NA))
O$Y1 <- ifelse(HCVData$Cancer.Diagnosis.Date>'2015-12-31' | is.na(HCVData$Cancer.Diagnosis.Date), 0, 1)
O$Y2 <- ifelse(HCVData$Cancer.Diagnosis.Date>'2016-12-31' | is.na(HCVData$Cancer.Diagnosis.Date), 0, 1)
O$Y3 <- ifelse(HCVData$Cancer.Diagnosis.Date>'2017-12-31' | is.na(HCVData$Cancer.Diagnosis.Date), 0, 1)
O$Y4 <- ifelse(HCVData$Cancer.Diagnosis.Date>'2018-12-31' | is.na(HCVData$Cancer.Diagnosis.Date), 0, 1)
O$Y5 <- ifelse(HCVData$Cancer.Diagnosis.Date>'2019-12-31' | is.na(HCVData$Cancer.Diagnosis.Date), 0, 1)
O$L1 <- HCVData$FIB4_by2015
O$L2 <- HCVData$FIB4_by2016
O$L3 <- HCVData$FIB4_by2017
O$L4 <- HCVData$FIB4_by2018
O$L1lm <- HCVData$YearsSinceFib4_2015
O$L2lm <- HCVData$YearsSinceFib4_2016
O$L3lm <- HCVData$YearsSinceFib4_2017
O$L4lm <- HCVData$YearsSinceFib4_2018
#commenting out Shelley's work of art because not needed :(
#HCVDataestimate$L1lm <- ifelse(!is.na(HCVData$FIB4_2014), 2014, ifelse(!is.na(HCVData$FIB4_2013), 2013, ifelse(!is.na(HCVData$FIB4_2012), 2012, ifelse(!is.na(HCVData$FIB4_2011), 2011, ifelse(!is.na(HCVData$FIB4_2010), 2010, ifelse(!is.na(HCVData$FIB4_2009), 2009, NA))))))
#HCVDataestimate$L2lm <- ifelse(!is.na(HCVData$FIB4_2015), 2015, ifelse(!is.na(HCVData$FIB4_2014), 2014, ifelse(!is.na(HCVData$FIB4_2013), 2013, ifelse(!is.na(HCVData$FIB4_2012), 2012, ifelse(!is.na(HCVData$FIB4_2011), 2011, ifelse(!is.na(HCVData$FIB4_2010), 2010, ifelse(!is.na(HCVData$FIB4_2009), 2009, NA)))))))
O$A1 <- HCVData$VISIT_COUNT_2015
O$A2 <- HCVData$VISIT_COUNT_2016
O$A3 <- HCVData$VISIT_COUNT_2017
O$A4 <- HCVData$VISIT_COUNT_2018
O$A5 <- HCVData$VISIT_COUNT_2019
#truncate visits to 3
O$A1[O$A1>2] <-3
O$A2[O$A2>2] <-3
O$A3[O$A3>2] <-3
O$A4[O$A4>2] <-3
O$C5 <- ifelse(O$A5 == 0, 1, 0)
O <- O %>% dplyr::select(-V1)
#ESTIMATE
df <- O
#version with 4 levels for each A
x <- list(0:1)
abar<- expand.grid(rep(x, 8))
#set n equal to number of rows
n <- as.numeric(nrow(df))
n2 <- as.numeric(nrow(abar))
# #COMMENTING OUT SO DOCUMENT WILL KNIT
# #initialize sumA
# sumA= rep(NA, n2)
#
# # initialize regimes with dim n X num Anodes = 4 X num regimes
# regimes = array(NA, dim=c(n,8,n2))
#
# #fill in regimes and sumA
# for(i in 1:n2){
#   regimes[,,i] <- matrix(rep(as.numeric(abar[i,]),n), byrow=TRUE, nrow=n)
#   sumA[i] =rowSums(abar[i,],  na.rm = TRUE)
# }
#
# #initialize and define summary measures
# summary.measures = array(dim=c(n2,1,1))
# dimnames(summary.measures)[[2]]=list("sumA")
# summary.measures[,,1]=as.matrix(sumA)
#
#
# #define working.msm = character formula for working MSM
# working.msm = "Y ~ sumA"
#
# #Turning As into sets of binary indicators-armadillo
# #A1 first
# df$A11 <- ifelse(df$A1 == 0, 0, NA)
# df$A12 <- ifelse(df$A1 == 0, 0, NA)
#
# df$A11 <- ifelse(df$A1 == 1, 1, df$A11)
# df$A12 <- ifelse(df$A1 == 1, 0, df$A12)
#
# df$A11 <- ifelse(df$A1 == 2, 0, df$A11)
# df$A12 <- ifelse(df$A1 == 2, 1, df$A12)
#
# df$A11 <- ifelse(df$A1 == 3, 1, df$A11)
# df$A12 <- ifelse(df$A1 == 3, 1, df$A12)
#
# #creating the A2 indicators
# df$A21 <- ifelse(df$A2 == 0, 0, NA)
# df$A22 <- ifelse(df$A2 == 0, 0, NA)
#
# df$A21 <- ifelse(df$A2 == 1, 1, df$A21)
# df$A22 <- ifelse(df$A2 == 1, 0, df$A22)
#
# df$A21 <- ifelse(df$A2 == 2, 0, df$A21)
# df$A22 <- ifelse(df$A2 == 2, 1, df$A22)
#
# df$A21 <- ifelse(df$A2 == 3, 1, df$A21)
# df$A22 <- ifelse(df$A2 == 3, 1, df$A22)
#
# #creating the A3 indicators
# df$A31 <- ifelse(df$A3 == 0, 0, NA)
# df$A32 <- ifelse(df$A3 == 0, 0, NA)
#
# df$A31 <- ifelse(df$A3 == 1, 1, df$A31)
# df$A32 <- ifelse(df$A3 == 1, 0, df$A32)
#
# df$A31 <- ifelse(df$A3 == 2, 0, df$A31)
# df$A32 <- ifelse(df$A3 == 2, 1, df$A32)
#
# df$A31 <- ifelse(df$A3 == 3, 1, df$A31)
# df$A32 <- ifelse(df$A3 == 3, 1, df$A32)
#
# #creating the A4 indicators
# df$A41 <- ifelse(df$A4 == 0, 0, NA)
# df$A42 <- ifelse(df$A4 == 0, 0, NA)
#
# df$A41 <- ifelse(df$A4 == 1, 1, df$A41)
# df$A42 <- ifelse(df$A4 == 1, 0, df$A42)
#
# df$A41 <- ifelse(df$A4 == 2, 0, df$A41)
# df$A42 <- ifelse(df$A4 == 2, 1, df$A42)
#
# df$A41 <- ifelse(df$A4 == 3, 1, df$A41)
# df$A42 <- ifelse(df$A4 == 3, 1, df$A42)
#
#
# df <- df %>% dplyr::select(L1, A11, A12,
#                            L2, A21, A22, Y2,
#                            L3, A31, A32, Y3,
#                            L4, A41, A42,Y4,
#                            C5,Y5)
#
# #Rescale Ls
# maxL1 <-max(df$L1)
# df$L1<-ifelse(is.na(df$L1), NA, (maxL1-df$L1)/maxL1)
#
# maxL2 <-max(df$L2)
# df$L2<-ifelse(is.na(df$L2), NA,(maxL2-df$L2)/maxL2)
#
# maxL3 <-max(df$L3,na.rm = T)
# df$L3<-ifelse(is.na(df$L3), NA, (maxL3-df$L3)/maxL3)
#
# maxL4 <-max(df$L4, na.rm = T)
# df$L4<-ifelse(is.na(df$L4), NA,(maxL4-df$L4)/maxL4)
#
# #estimate parameter using ltmleMSM function-
# results2.MSM <- ltmle::ltmleMSM(df,
#                      Anodes= c("A11", "A12",
#                                "A21", "A22",
#                                "A31", "A32",
#                                "A41", "A42" ),
#                      Lnodes = c("L1", "L2", "L3", "L4"),
#                      Ynodes = c("Y2", "Y3", "Y4", "Y5"),
#                      Cnodes = "C5",
#                      working.msm = working.msm,
#                      regimes = regimes,
#                      summary.measures = summary.measures,
#                      msm.weights = NULL,
#                      survivalOutcome = TRUE)
#
# sum.results2.MSM.tmle= summary(results2.MSM, "tmle")
# sum.results2.MSM.tmle
#
# sum.results2.MSM.iptw= summary(results2.MSM, "iptw")
# sum.results2.MSM.iptw
#
# results2.MSM.g <- ltmle::ltmleMSM(df,
#                      Anodes= c("A11", "A12",
#                                "A21", "A22",
#                                "A31", "A32",
#                                "A41", "A42"),
#                      Lnodes = c("L1", "L2", "L3", "L4"),
#                      Ynodes = c("Y2", "Y3", "Y4", "Y5"),
#                      Cnodes = "C5",
#                      working.msm = working.msm,
#                      regimes = regimes,
#                      summary.measures = summary.measures,
#                      msm.weights = NULL,
#                      survivalOutcome = TRUE,
#                      gcomp = TRUE)
#
# sum.results2.MSM.g = summary(results2.MSM.g, "gcomp")
# sum.results2.MSM.g
#
# estimates_O <- c(sum.results2.MSM.g$cmat[2,1],
#                          sum.results2.MSM.iptw$cmat[2,1],
#                          sum.results2.MSM.tmle$cmat[2,1])
load("O.Rdata")
load("results2.MSM112219.Rdata")
load("results2.MSM.g112219.Rdata")
load("estimates_O112119.Rdata")
#binary version of the analysis (yes/no visits each year)
x <- list(0:1)
abar<- expand.grid(rep(x, 4))
df <- O
#set n equal to number of rows
n <- as.numeric(nrow(df))
n2 <- as.numeric(nrow(abar))
#truncate visits to 1
df$A1[df$A1>0] <-1
df$A2[df$A2>0] <-1
df$A3[df$A3>0] <-1
df$A4[df$A4>0] <-1
#initialize sumA
sumA= rep(NA, n2)
# initialize regimes with dim n X num Anodes = 4 X num regimes
regimes = array(NA, dim=c(n,4,n2))
#fill in regimes and sumA
for(i in 1:n2){
regimes[,,i] <- matrix(rep(as.numeric(abar[i,]),n), byrow=TRUE, nrow=n)
sumA[i] =rowSums(abar[i,],  na.rm = TRUE)
}
#initialize and define summary measures
summary.measures = array(dim=c(n2,1,1))
dimnames(summary.measures)[[2]]=list("sumA")
summary.measures[,,1]=as.matrix(sumA)
# #define working.msm = character formula for working MSM
working.msm = "Y ~ sumA"
df <- df %>% dplyr::select(L1, A1,
L2, A2, Y2,
L3, A3, Y3,
L4, A4, Y4,
C5, Y5)
#Rescale Ls
maxL1 <-max(df$L1)
df$L1<-ifelse(is.na(df$L1), NA, (maxL1-df$L1)/maxL1)
maxL2 <-max(df$L2)
df$L2<-ifelse(is.na(df$L2), NA,(maxL2-df$L2)/maxL2)
maxL3 <-max(df$L3,na.rm = T)
df$L3<-ifelse(is.na(df$L3), NA, (maxL3-df$L3)/maxL3)
maxL4 <-max(df$L4, na.rm = T)
df$L4<-ifelse(is.na(df$L4), NA,(maxL4-df$L4)/maxL4)
#estimate parameter using ltmleMSM function-
resultsbin.MSM <- ltmle::ltmleMSM(df,
Anodes = c("A1", "A2", "A3", "A4"),
Lnodes = c("L1", "L2", "L3", "L4"),
Ynodes = c("Y2", "Y3", "Y4", "Y5"),
Cnodes = "C5",
working.msm = working.msm,
regimes = regimes,
summary.measures = summary.measures,
msm.weights = NULL,
survivalOutcome = TRUE)
sum.resultsbin.MSM.tmle= summary(resultsbin.MSM, "tmle")
sum.resultsbin.MSM.tmle
sum.resultsbin.MSM.iptw= summary(resultsbin.MSM, "iptw")
sum.resultsbin.MSM.iptw
resultsbin.MSM.g <- ltmle::ltmleMSM(df,
Anodes = c("A1", "A2", "A3", "A4"),
Lnodes = c("L1", "L2", "L3", "L4"),
Ynodes = c("Y2", "Y3", "Y4", "Y5"),
Cnodes = "C5",
working.msm = working.msm,
regimes = regimes,
summary.measures = summary.measures,
msm.weights = NULL,
survivalOutcome = TRUE,
gcomp = TRUE)
sum.resultsbin.MSM.g = summary(resultsbin.MSM.g, "gcomp")
sum.resultsbin.MSM.g
estimates_Obin <- c(sum.resultsbin.MSM.g$cmat[2,1],
sum.resultsbin.MSM.iptw$cmat[2,1],
sum.resultsbin.MSM.tmle$cmat[2,1])
save(estimates_Obin, file = "estimates_Obin112319.Rdata")
estimates_O
tmlebeta <- estimates_O[3]*-100
tmlebeta_bin <- estimates_Obin[3]*-100
HCCpercent <- mean(HCVData$HCC)*100
cirrhosis <- nrow(subset(FIBLong, value>3.25))
outliers <- nrow(subset(FIBLong, value>9))
cirrhosis <- nrow(dplyr::subset(FIBLong, value>3.25))
cirrhosis <- nrow(subset(FIBLong, value>3.25))
outliers <- nrow(subset(FIBLong, value>9))
FIB4Only <- SimData %>% dplyr::select(L1, L2, L3, L4)
PsiFpercent <- PsiF*-100
knitr::opts_chunk$set(echo = TRUE)
#open packages
library(here)
library(foreign)
library(labelled)
library(dplyr)
library(reshape2)
library(lme4)
library(MASS)
library(mice)
#set working directory
#setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
setwd("~/GitHub/lizzyandshelley/Dataset")  #SHELLEY
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#get variable labels
attr(df, "variable.labels")
df.labels <- as.data.frame(attr(df, "variable.labels"))
QDSlabels <- data.frame(rownames(df.labels))
df.labels <- cbind(QDSlabels, df.labels)
names(df.labels) <- c("VAR_ID", "description")
rm(QDSlabels)
#USE THIS CODE TO LOOK UP A VARIABLE DESCRIPTION
#df.labels$description[df.labels$VAR_ID=="GENDER"]
#clean up data types
df$MOSHOME <- as.numeric(df$MOSHOME)
df$MOSHOME1 <- as.numeric(df$MOSHOME1)
df$MOSHOME[is.na(df$MOSHOME)] <- 0
df$MOSHOME1[is.na(df$MOSHOME1)] <- 0
df$AGE <- as.numeric(df$AGE)
df$Rshare1 <- factor(df$Rshare1)
#create key variables not asked at baseline
df$ARREST <- rep(NA)
df$POLICE <- rep(NA)
df$JAIL <- rep(NA)
#select variables
dfs <- df %>%
dplyr::select("SUBJECT", "FU1", "FU2", "GENDER", "AGE", "RACELG", "HOMELESS", "HOMELESS1", "HOMELESS2", "MOSHOME", "MOSHOME1", "MOSHOM2", "RECSHR", "RECSHR1", "RECSHR2", "PUBINJ", "PUBINJ1", "PUBINJ2", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE", "POLICE1", "POLICE2", "ARREST", "ARREST1", "ARREST2", "JAIL", "JAIL1", "JAIL2", "Rshare", "Rshare1", "Rshare2")
#look at missingness
missing <- data.frame(md.pattern(dfs))
#remove subjects with NA for exposure or outcome
dfs <- subset(dfs, SUBJECT!=4394)
dfs <- subset(dfs, SUBJECT!=4457)
dfs <- subset(dfs, SUBJECT!=5055)
dfs <- subset(dfs, SUBJECT!=5267)
dfs <- subset(dfs, SUBJECT!=5276)
dfs <- subset(dfs, SUBJECT!=5277)
# #figure out any additional cases that will be dropped from glms below
# dfsglm <- dfs %>%
#   dplyr::select("SUBJECT", "GENDER", "AGE", "HOMELESS", "MOSHOME", "PUBINJ", "IJWOTH","RECSHR")
# dfsglm$SUBJECT[which(! complete.cases(dfsglm))]
#impute missing covariates
keeps <- c("SUBJECT", "GENDER", "AGE", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE1", "POLICE2", "ARREST1", "ARREST2", "JAIL1", "JAIL2")
keeps2 <- c("GENDER", "AGE", "IJWOTH", "IJWOTH1", "IJWOTH2", "POLICE1", "POLICE2", "ARREST1", "ARREST2", "JAIL1", "JAIL2")
imputation <- mice(dfs[, (names(dfs) %in% keeps)], m=5, maxit=5, printFlag=TRUE, seed = 242)
dfs1 <- complete(imputation, 1)
dfs1 <- merge(dfs1, dfs[, !(names(dfs) %in% keeps2)], by = "SUBJECT")
dfs2 <- complete(imputation, 2)
dfs2 <- merge(dfs2, dfs[, !(names(dfs) %in% keeps2)], by = "SUBJECT")
dfs3 <- complete(imputation, 3)
dfs3 <- merge(dfs3, dfs[, !(names(dfs) %in% keeps2)], by = "SUBJECT")
dfs4 <- complete(imputation, 4)
dfs4 <- merge(dfs4, dfs[, !(names(dfs) %in% keeps2)], by = "SUBJECT")
dfs5 <- complete(imputation, 5)
dfs5 <- merge(dfs5, dfs[, !(names(dfs) %in% keeps2)], by = "SUBJECT")
#reweight sample to address LTFU
I_ABC <- dfs$FU1 == "Yes" & dfs$FU2 == 1
gFU1a <- glm(FU1 ~ RECSHR + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs1, na.action = na.omit)
gFU1b <- glm(FU1 ~ RECSHR + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs2, na.action = na.omit)
gFU1c <- glm(FU1 ~ RECSHR + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs3, na.action = na.omit)
gFU1d <- glm(FU1 ~ RECSHR + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs4, na.action = na.omit)
gFU1e <- glm(FU1 ~ RECSHR + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs5, na.action = na.omit)
pFU1a <- predict(gFU1a, type = "response")
pFU1b <- predict(gFU1b, type = "response")
pFU1c <- predict(gFU1c, type = "response")
pFU1d <- predict(gFU1d, type = "response")
pFU1e <- predict(gFU1e, type = "response")
impFU1 <-data.frame(pFU1a, pFU1b, pFU1c, pFU1d, pFU1e)
dfs$pFU1 <- rowMeans(impFU1)
gFU2a <- glm(FU2 ~ FU1 + Rshare + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs1, na.action = na.omit)
gFU2b <- glm(FU2 ~ FU1 + Rshare + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs2, na.action = na.omit)
gFU2c <- glm(FU2 ~ FU1 + Rshare + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs3, na.action = na.omit)
gFU2d <- glm(FU2 ~ FU1 + Rshare + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs4, na.action = na.omit)
gFU2e <- glm(FU2 ~ FU1 + Rshare + PUBINJ + HOMELESS + MOSHOME + IJWOTH + GENDER + AGE, family = "binomial", data = dfs5, na.action = na.omit)
pFU2a <- predict(gFU2a, type = "response")
pFU2b <- predict(gFU2b, type = "response")
pFU2c <- predict(gFU2c, type = "response")
pFU2d <- predict(gFU2d, type = "response")
pFU2e <- predict(gFU2e, type = "response")
impFU2 <-data.frame(pFU2a, pFU2b, pFU2c, pFU2d, pFU2e)
dfs$pFU2 <- rowMeans(impFU2)
dfs$w <- I_ABC/(dfs$pFU1 * dfs$pFU2)
rm(gFU1a, gFU1b, gFU1c, gFU1d, gFU1e, gFU2a, gFU2b, gFU2c, gFU2d, gFU2e, pFU1a, pFU1b, pFU1c, pFU1d, pFU1e, pFU2a, pFU2b, pFU2c, pFU2d, pFU2e, impFU1, impFU2)
#select people with no LTFU (complete case)
#dfc <- subset(df, FU2==1 & FU1=="Yes")
#make dataset long format
dfslong <- reshape(dfs, idvar = "SUBJECT", varying = list(c("HOMELESS", "HOMELESS1", "HOMELESS2"), c("MOSHOME", "MOSHOME1", "MOSHOM2"), c("RECSHR", "RECSHR1", "RECSHR2"), c("PUBINJ", "PUBINJ1", "PUBINJ2"), c("IJWOTH", "IJWOTH1", "IJWOTH2"), c("POLICE", "POLICE1", "POLICE2"), c("ARREST", "ARREST1", "ARREST2"), c("JAIL", "JAIL1", "JAIL2")), timevar = "VISIT", v.names = c("HOMELESS", "MOSHOME", "TIMESHARE", "PUBINJ", "IJWOTH", "POLICE", "ARREST", "JAIL"), ids = "SUBJECT", times = c("baseline", "FU1", "FU2"), direction = "long")
#update variable types
dfslong$TIMESHARE <- as.numeric(dfslong$TIMESHARE)
dfslong$POLICE <- as.factor(dfslong$POLICE)
dfslong$ARREST <- as.factor(dfslong$ARREST)
dfslong$JAIL <- as.factor(dfslong$JAIL)
dfslong$VISIT <- as.factor(dfslong$VISIT)
dfslong$MOSHOME <- as.numeric(dfslong$MOSHOME)
dfslong$PUBINJord <- as.numeric(ifelse(dfslong$PUBINJ=="Never (0% of the time)", 0, ifelse(dfslong$PUBINJ=="Occasionally (less than 25% of the time)", 1, ifelse(dfslong$PUBINJ=="Sometimes (25% to 74% of the time)", 2, ifelse(dfslong$PUBINJ=="Usually (75% to 99% of the time)", 3, ifelse(dfslong$PUBINJ=="Always (100% of the time)", 4 ,NA))))))
dfslong$IJWOTHord <- as.numeric(ifelse(dfslong$IJWOTH=="Never (0% of the time)", 0, ifelse(dfslong$IJWOTH=="Occasionally (less than 25% of the time)", 1, ifelse(dfslong$IJWOTH=="Sometimes (25% to 74% of the time)", 2, ifelse(dfslong$IJWOTH=="Usually (75% to 99% of the time)", 3, ifelse(dfslong$IJWOTH=="Always (100% of the time)", 4, NA))))))
dfslong$YRSHOME <- dfslong$MOSHOME/12
