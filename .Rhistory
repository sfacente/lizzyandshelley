SimData_max <- generate_data_intervene(1000, 0, 0, 6, 6, 6, 6, 6)
SimData_inc <- generate_data_intervene(1000, 0, 0, 1, 2, 3, 4, 5)
rm(SimData_inc)
PsiF <- mean(SimData_none$Y5) - mean(SimData_max$Y5); PsiF
PsiF <- mean(SimData_max$Y5) - mean(SimData_none$Y5); PsiF
PsiF <- mean(SimData_max$Y5)/mean(SimData_none$Y5); PsiF
mean(SimData_max$Y5)
mean(SimData_none$Y5)
PsiF <- mean(SimData_none$Y5)/mean(SimData_max$Y5); PsiF
PsiFpercent <- PsiF*100
PsiFpercent <- PsiF*100-100
head(HCVData$Cancer.Diagnosis.Name)
is.na
nrows(HCVData) - nrows(HCVData[is.na(Cancer.Diagnosis.Name)]
HCC <- nrows(HCVData) - nrows(HCVData[is.na(Cancer.Diagnosis.Name)]
HCC <- nrows(HCVData) - nrows(HCVData[is.na(Cancer.Diagnosis.Name)])
HCC <- nrow(HCVData) - nrow(HCVData[is.na(Cancer.Diagnosis.Name)])
HCC <- nrow(HCVData) - nrow(HCVData[is.na(HCVData$Cancer.Diagnosis.Name)])
is.na(HCVData$Cancer.Diagnosis.Name)
HCC <- nrow(HCVData) - sum(is.na(HCVData$Cancer.Diagnosis.Name))
summary(HCVData$Cancer.Diagnosis.Name)
HCC <- nrow(HCVData) - na.count(HCVData$Cancer.Diagnosis.Name)
sum(is.na(HCVData$Cancer.Diagnosis.Name))
HCC <- nrow(HCVData) - sum(is.na(HCVData$Cancer.Diagnosis.Name))
head(HCVData$EverPrimaryCareVisit)
head(HCVData$EverHepVisit)
visits <- sum(ifelse(HCVData$EverPrimaryCareVisit == "YES" & HCVData$EverHepVisit == "Yes", 1, 0))
class(HCVData$EverPrimaryCareVisit)
class(HCVData$EverHepVisit)
visits <- ifelse(HCVData$EverPrimaryCareVisit == "YES" | HCVData$EverHepVisit == "Yes", 1, 0)
visits <- sum(ifelse(HCVData$EverPrimaryCareVisit == "YES" | HCVData$EverHepVisit == "Yes", 1, 0))
visits <- ifelse(HCVData$EverPrimaryCareVisit == "YES" | HCVData$EverHepVisit == "Yes", 1, 0)
sum(visits)
class(visits)
sum(as.vector(visits))
count(visits==1)
summary(visits)
is.na(visits)
anyvisit <- nrow(HCVData) - sum(is.na(visits))
#DAGGity code- ie to use in the online Daggity tool...I don't love rDaggity
#But am putting the code here so we have it. Reminder that you can command/control-shift-c to comment in or out a whole chunk.
C2 1 @0.166,2.321
C3 1 @1.507,2.005
Delta1 1 @-0.292,1.289
Delta2 1 @0.724,1.251
FIB-4_Score_Y1 1 @-0.303,0.743
FIB-4_Score_Y2 1 @0.813,0.640
Gender 1 @-1.945,1.903
HCC%20Year%203 O @1.449,-0.615
HCC_Y1 1 @-0.321,-0.350
HCC_Y2 1 @0.659,-0.463
Race 1 @-2.228,0.483
SES 1 @-1.939,-1.213
Visits_Y1 E @-0.321,0.204
Visits_Y2 E @0.735,0.031
C2 C3 Delta2 @0.683,1.671 HCC_Y2 @1.700,0.966 Visits_Y2 @1.533,0.510
C3 HCC%20Year%203
Delta1 Delta2 FIB-4_Score_Y1
Delta2 FIB-4_Score_Y2
FIB-4_Score_Y1 FIB-4_Score_Y2 HCC_Y2 Visits_Y1 Visits_Y2
FIB-4_Score_Y2 HCC%20Year%203 Visits_Y2
Gender C2 @-0.915,2.484 C3 @0.445,2.505 Delta1 Delta2 @-0.730,2.493 HCC%20Year%203 @1.694,1.823 HCC_Y1 @-1.467,-0.374 HCC_Y2 @-0.545,-1.642 Visits_Y1 @-1.311,0.421 Visits_Y2 @0.270,2.609
HCC_Y1 C2 @0.255,-0.201 Delta2 FIB-4_Score_Y2 HCC_Y2 Visits_Y1 Visits_Y2
HCC_Y2 C3 @1.679,0.432 HCC%20Year%203 Visits_Y2
Race C2 C3 Delta1 @-1.740,1.126 Delta2 @-1.687,2.003 HCC%20Year%203 @-0.188,-1.761 HCC_Y1 HCC_Y2 @-1.734,-1.440 Visits_Y1 Visits_Y2 @0.240,1.841
SES C2 @-0.861,1.622 C3 @-1.212,1.129 Delta1 @-1.275,0.153 Delta2 @-1.999,0.600 FIB-4_Score_Y2 @1.569,-1.615 HCC%20Year%203 @1.676,-2.097 HCC_Y1 @-0.012,-1.731 HCC_Y2 @0.317,-1.195 Visits_Y1 @-1.910,-0.061 Visits_Y2 @1.389,-1.213
Visits_Y1 C2 @0.344,0.427 Delta2 FIB-4_Score_Y2 HCC_Y2 Visits_Y2
Visits_Y2 C3 @1.584,0.844 HCC%20Year%203
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "binomial", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, C2, family = "binomial", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, C3, family = "binomial", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, C4, family = "binomial", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- (SimData$A1 == 1) * gA1_1 + (SimData$A1 == 0) * (1 - gA1_1)
gA2 <- (SimData$A2 == 1) * gA2_1 + (SimData$A2 == 0) * (1 - gA2_1)
gA3 <- (SimData$A3 == 1) * gA3_1 + (SimData$A3 == 0) * (1 - gA3_1)
gA4 <- (SimData$A4 == 1) * gA4_1 + (SimData$A4 == 0) * (1 - gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
g2A1 <- glm(A1 ~ L1, Y1, family = "binomial", data = SimData)
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, C2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, C3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, C4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- (SimData$A1 == 1) * gA1_1 + (SimData$A1 == 0) * (1 - gA1_1)
gA2 <- (SimData$A2 == 1) * gA2_1 + (SimData$A2 == 0) * (1 - gA2_1)
gA3 <- (SimData$A3 == 1) * gA3_1 + (SimData$A3 == 0) * (1 - gA3_1)
gA4 <- (SimData$A4 == 1) * gA4_1 + (SimData$A4 == 0) * (1 - gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, C2, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- (SimData$A1 == 1) * gA1_1 + (SimData$A1 == 0) * (1 - gA1_1)
gA2 <- (SimData$A2 == 1) * gA2_1 + (SimData$A2 == 0) * (1 - gA2_1)
gA3 <- (SimData$A3 == 1) * gA3_1 + (SimData$A3 == 0) * (1 - gA3_1)
gA4 <- (SimData$A4 == 1) * gA4_1 + (SimData$A4 == 0) * (1 - gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- (SimData$A1 == 1) * gA1_1 + (SimData$A1 == 0) * (1 - gA1_1)
gA1 <- (SimData$A1 > 0) * gA1_1
head(gA1)1
head(gA1_1)
gA1 <- mean(gA1_1)
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- mean(gA1_1)
gA2 <- mean(gA2_1)
gA3 <- mean(gA3_1)
gA4 <- mean(gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- mean(gA1_1)
gA2 <- mean(gA2_1)
gA3 <- mean(gA3_1)
gA4 <- mean(gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y5 ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- mean(gA1_1)
gA2 <- mean(gA2_1)
gA3 <- mean(gA3_1)
gA4 <- mean(gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
w <- 1/(gA1_1 * gA2_1 * gA3_1 * gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- mean(gA1_1)
gA2 <- mean(gA2_1)
gA3 <- mean(gA3_1)
gA4 <- mean(gA4_1)
w <- 1/(gA1 * gA2 * gA3 * gA4)
MSM <- glm(Y5 ~ sum_a, weights = w, data = SimData)
beta1 <- coef(MSM)[2]
sum_a <- rowSums(SimData[c("A1", "A2", "A3", "A4")])
g2A1 <- glm(A1 ~ L1, Y1, family = "poisson", data = SimData)
g2A2 <- glm(A2 ~ L2, Y2, family = "poisson", data = SimData)
g2A3 <- glm(A3 ~ L3, Y3, family = "poisson", data = SimData)
g2A4 <- glm(A4 ~ L4, Y4, family = "poisson", data = SimData)
gA1_1 <- predict(g2A1, type = 'response')
gA2_1 <- predict(g2A2, type = 'response')
gA3_1 <- predict(g2A3, type = 'response')
gA4_1 <- predict(g2A4, type = 'response')
gA1 <- mean(gA1_1)
gA2 <- mean(gA2_1)
gA3 <- mean(gA3_1)
gA4 <- mean(gA4_1)
knitr::opts_chunk$set(echo = TRUE)
library(ltmle)
load(DataStructure2.RData)
load("C:/Users/shell/Dropbox/GRAD SCHOOL/Causal II/Labs/Lab 5/DataStructure2.RData")
load("C:/Users/shell/Dropbox/GRAD SCHOOL/Causal II/Labs/Lab 5/DataStructure2.RData")
load("C:/Users/shell/Dropbox/GRAD SCHOOL/Causal II/Labs/Lab 5/DataStructure2.RData")
head(ObsData2)
?subset
ObsData = ObsData2[L1 | A1 | Y]
ObsData <- ObsData2[ObsData2$L1, ObsData2$A1, ObsData2$Y]
ObsData <- ObsData2[ObsData2$L1 | ObsData2$A1 | ObsData2$Y]
selection <- c("L1", "A1", "Y")
ObsData <- ObsData2[selection]
View(ObsData)
#2. Set variables to character names
Lnodes = ObsData$L1
Anodes = ObsData$A1
Ynodes = ObsData$Y
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Lnodes = Lnodes, Anodes = Anodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, abar = 1, variance.method = "ic")
options(warn = -1)
#2. Set variables to character names
Lnodes <- "L1"
Anodes <- "A1"
Ynodes <- "Y"
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Anodes = Anodes, abar = 1, variance.method = "ic")
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#2. Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic, gcomp = TRUE)
#2. Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE)
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#2. Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE)
#3. Print the summary of results for the estimators
summary(EY1_ltmle_t$estimates["tmle"])
print(summary(EY1_ltmle_t$estimates["iptw"]))
print(summary(EY1_ltmle_g$estimates["gcomp"]))
#3. Print the summary of results for the estimators
summary(EY1_ltmle_t$estimates["tmle"])
summary(EY1_ltmle_t$estimates["iptw"])
summary(EY1_ltmle_g$estimates["gcomp"])
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#2. Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g <- ltmle(ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE)
#3. Print the summary of results for the estimators
summary(EY1_ltmle_t$estimates["tmle"])
summary(EY1_ltmle_t$estimates["iptw"])
summary(EY1_ltmle_g$estimates["gcomp"])
#1. Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic")
#2. Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE)
#4. Store the estimates
EY1_hat_tmle <- EY1_ltmle_t$estimates["tmle"]
EY1_hat_iptw <- EY1_ltmle_t$estimates["iptw"]
EY1_hat_gcomp <- EY1_ltmle_g$estimates["gcomp"]
#3. Print the summary of results for the estimators
summary(EY1_ltmle_t)
summary(EY1_ltmle_g)
#4. Store the estimates
EY1_hat_tmle <- EY1_ltmle_t$estimates["tmle"]
EY1_hat_iptw <- EY1_ltmle_t$estimates["iptw"]
EY1_hat_gcomp <- EY1_ltmle_g$estimates["gcomp"]
#3. Print the summary of results for the estimators
summary(EY1_ltmle_t, "tmle")
summary(EY1_ltmle_t, "iptw")
summary(EY1_ltmle_g, "gcomp")
#1. Generate a bootstrap sample
n <- nrow(ObsData)
B <- 5
estimates <- matrix(NA, nrow = B, ncol = 3)
colnames(estimates) <- c("G-Comp", "IPTW", "TMLE")
for(b in 1:B) {
#create bootstrap sample
bootIndices <- sample(1:n, replace = TRUE)
bootData <- ObsData[bootIndices,]
#Estimate treatment specific means
Boot_ltmle_t <- ltmle(data = bootData, Anodes = "A1", Lnodes = "L1",    Ynodes = "Y", abar = 1, variance.method = "ic")
Boot_ltmle_g <- ltmle(data = bootData, Anodes = "A1", Lnodes = "L1",    Ynodes = "Y", abar = 1, variance.method = "ic", gcomp = TRUE)
#Save the estimates
PsiHat_TMLE_b <- Boot_ltmle_t$estimates["tmle"]
PsiHat_IPTW_b <- Boot_ltmle_t$estimates["iptw"]
PsiHat_gcomp_b <- Boot_ltmle_g$estimates["gcomp"]
estimates[b,] <- c(PsiHat_gcomp_b, PsiHat_IPTW_b, PsiHat_TMLE_b)
}
#1. Generate a bootstrap sample
n <- nrow(ObsData)
B <- 500
estimates <- matrix(NA, nrow = B, ncol = 3)
colnames(estimates) <- c("G-Comp", "IPTW", "TMLE")
for(b in 1:B) {
#create bootstrap sample
bootIndices <- sample(1:n, replace = TRUE)
bootData <- ObsData[bootIndices,]
#Estimate treatment specific means
Boot_ltmle_t <- ltmle(data = bootData, Anodes = "A1", Lnodes = "L1",    Ynodes = "Y", abar = 1, variance.method = "ic")
Boot_ltmle_g <- ltmle(data = bootData, Anodes = "A1", Lnodes = "L1",    Ynodes = "Y", abar = 1, variance.method = "ic", gcomp = TRUE)
#Save the estimates
PsiHat_TMLE_b <- Boot_ltmle_t$estimates["tmle"]
PsiHat_IPTW_b <- Boot_ltmle_t$estimates["iptw"]
PsiHat_gcomp_b <- Boot_ltmle_g$estimates["gcomp"]
estimates[b,] <- c(PsiHat_gcomp_b, PsiHat_IPTW_b, PsiHat_TMLE_b)
}
?quantile
quantile(estimates, pros = c(0.25, .975))
bootCI <- quantile(estimates, pros = c(0.25, .975))
bootCI <- quantile(estimates, pros = c(0.025, .975))
bootCI
bootCI <- quantile(estimates, probs = c(0.025, .975))
bootCI
ltmle <- function(...) {
suppressMessages(ltmle::ltmle(...))
}
ltmleMSM <- function(...) {
suppressMessages(ltmle::ltmleMSM(...))
}
#5. Compute CIs assuming normality
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96(sqrt(Boot_ltmle_t$variance.estimate["tmle"]))
#5. Compute CIs assuming normality
normalCI <- apply(estimates, 2, var)var(estimates)
#5. Compute CIs assuming normality
normalCI <- apply(estimates, 2, var)
apply(estimates, 2, var)
#5. Compute CIs assuming normality
variance <- apply(estimates, 2, var)
#6. Use quantile function to obtain bootstrap CI
bootCI_TMLE <- quantile(PsiHat_TMLE_b, probs = c(0.025, .975))
bootCI_IPTW <- quantile(PsiHat_IPTW_b, probs = c(0.025, .975))
bootCI_Gcomp <- quantile(PsiHat_Gcomp_b, probs = c(0.025, .975))
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96(sqrt(variance[3]))
normalCI_TMLE_l <- PsiHat_TMLE_b - 1.96(sqrt(variance[3]))
#5. Compute CIs assuming normality
variance <- apply(estimates, 2, var)
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96(sqrt(variance[3]))
#5. Compute CIs assuming normality
variancecalc <- apply(estimates, 2, var)
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96(sqrt(variancecalc[3]))
PsiHat_TMLE_b + 1.96(sqrt(variance[3]))
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96*(sqrt(variance[3]))
normalCI_Gcomp_l <- PsiHat_gcomp_b - 1.96*(sqrt(variance[1]))
#6. Use quantile function to obtain bootstrap CI
bootCI_TMLE <- quantile(PsiHat_TMLE_b, probs = c(0.025, .975))
bootCI_IPTW <- quantile(PsiHat_IPTW_b, probs = c(0.025, .975))
SL.library <- c("SL.glm", "SL.bayesglm", "SL.mean")
SL.library <- c("SL.glm", "SL.bayesglm", "SL.mean")
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", SL.library = "SL.library")
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE, SL.library = "SL.library")
#Store the estimates
EY1_hat_tmle_SL <- EY1_ltmle_t_SL$estimates["tmle"]
EY1_hat_iptw_SL <- EY1_ltmle_t_SL$estimates["iptw"]
EY1_hat_gcomp_SL <- EY1_ltmle_g_SL$estimates["gcomp"]
SL.library <- c("SL.glm", "SL.bayesglm", "SL.mean")
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", SL.library = "SL.library")
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", SL.library = SL.library)
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE, SL.library = SL.library)
SL.library <- c("SL.glm", "SL.bayesglm", "SL.mean")
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", SL.library = SL.library)
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE, SL.library = SL.library)
#Store the estimates
EY1_hat_tmle_SL <- EY1_ltmle_t_SL$estimates["tmle"]
EY1_hat_iptw_SL <- EY1_ltmle_t_SL$estimates["iptw"]
EY1_hat_gcomp_SL <- EY1_ltmle_g_SL$estimates["gcomp"]
#5. Compute CIs assuming normality
variance <- apply(estimates, 2, var)
normalCI_TMLE_u <- PsiHat_TMLE_b + 1.96*(sqrt(variance[3]))
normalCI_TMLE_l <- PsiHat_TMLE_b - 1.96*(sqrt(variance[3]))
normalCI_IPTW_u <- PsiHat_IPTW_b + 1.96*(sqrt(variance[2]))
normalCI_IPTW_l <- PsiHat_IPTW_b - 1.96*(sqrt(variance[2]))
normalCI_Gcomp_u <- PsiHat_gcomp_b + 1.96*(sqrt(variance[1]))
normalCI_Gcomp_l <- PsiHat_gcomp_b - 1.96*(sqrt(variance[1]))
#6. Use quantile function to obtain bootstrap CI
bootCI_TMLE <- quantile(PsiHat_TMLE_b, probs = c(0.025, .975))
bootCI_IPTW <- quantile(PsiHat_IPTW_b, probs = c(0.025, .975))
bootCI_Gcomp <- quantile(PsiHat_gcomp_b, probs = c(0.025, .975))
bootCI_Gcomp
#8 - Incorporating SuperLearner
SL.library <- c("SL.glm", "SL.bayesglm", "SL.mean")
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", SL.library = SL.library)
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_SL <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE, SL.library = SL.library)
#Store the estimates
EY1_hat_tmle_SL <- EY1_ltmle_t_SL$estimates["tmle"]; EY1_hat_tmle_SL
EY1_hat_iptw_SL <- EY1_ltmle_t_SL$estimates["iptw"]; EY1_hat_iptw_SL
EY1_hat_gcomp_SL <- EY1_ltmle_g_SL$estimates["gcomp"]; EY1_hat_gcomp_SL
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_add <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = list(1,0), variance.method = "ic", SL.library = SL.library)
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_add <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = 1, variance.method = "ic", gcomp = TRUE, SL.library = SL.library)
#Store the estimates
EY1_hat_tmle_add <- EY1_ltmle_t_SL$estimates["tmle"]; EY1_hat_tmle_SL
EY1_hat_iptw_add <- EY1_ltmle_t_SL$estimates["iptw"]; EY1_hat_iptw_SL
EY1_hat_gcomp_add <- EY1_ltmle_g_SL$estimates["gcomp"]; EY1_hat_gcomp_SL
#Obtain estimates under A1 = 1 using TMLE and IPTW
EY1_ltmle_t_add <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = list(1,0), variance.method = "ic", SL.library = SL.library)
#Obtain estimates under A1 = 1 using G-comp and IPTW
EY1_ltmle_g_add <- ltmle(data = ObsData, Anodes = Anodes, Lnodes = Lnodes, Ynodes = Ynodes, abar = list(1,0), variance.method = "ic", gcomp = TRUE, SL.library = SL.library)
#Store the estimates
EY1_hat_tmle_add <- EY1_ltmle_t_add$estimates["tmle"]; EY1_hat_tmle_add
EY1_hat_iptw_add <- EY1_ltmle_t_add$estimates["iptw"]; EY1_hat_iptw_add
EY1_hat_gcomp_add <- EY1_ltmle_g_add$estimates["gcomp"]; EY1_hat_gcomp_add
#Print the summary
summary(EY1_ltmle_t_add, "tmle")
summary(EY1_ltmle_t_add, "iptw")
summary(EY1_ltmle_g_add, "gcomp")
load("C:/Users/shell/Dropbox/GRAD SCHOOL/Causal II/Labs/Lab 5/ObsDataMSM.RData")
head(ObsDataMSM)
summary(ObsDataMSM)
#3 create A1 and A2 from all combinations of A
ObsDataMSM$A <- ifelse(ObsDataMSM$A1==1 & ObsDataMSM$A2==0, 1, ifelse(ObsDataMSM$A1==0 & ObsDataMSM$A2==1, 2, ifelse(ObsDataMSM$A1==0 & ObsDataMSM$A2==0, 3, NA)))
View(ObsDataMSM)
#3 create A1 and A2 from all combinations of A
ObsDataMSM$A1 <- ifelse(ObsDataMSM$A==1, 1, 0)
ObsDataMSM$A2 <- ifelse(ObsDataMSM$A==2, 1, 0)
ObsDataMSM <- ObsDataMSM[, c("W1", "W2", "A1", "A2", "Y")]
#5 create the object summary.measures
summary.measures <- array(1:3, dim = c(3,1,1))
#name column
colmnames(summary.measures) = level
#name column
colnames(summary.measures) = level
#name column
colnames(summary.measures) = "level"
#7 estimate the parameters of the above MSM
results_l <- ltmleMSM(data = ObsDataMSM, Anodes = c("A1", "A2"), Ynodes = "Y", regimes = regimes, summary.measures = summary.measures, variance.method = "ic", working.msm = working.msm)
#4 create regimes
regimes <- list(function (row) c(1, 0),
function (row) c(0, 1),
function (row) c(0, 0))
#5 create the object summary.measures
summary.measures <- array(1:3, dim = c(3,1,1))
colnames(summary.measures) = "level"
#6 create working.msm
working.msm <- "Y ~ level"
#7 estimate the parameters of the above MSM
results_l <- ltmleMSM(data = ObsDataMSM, Anodes = c("A1", "A2"), Ynodes = "Y", regimes = regimes, summary.measures = summary.measures, variance.method = "ic", working.msm = working.msm)
results_g <- ltmleMSM(data = ObsDataMSM, Anodes = c("A1", "A2"), Ynodes = "Y", regimes = regimes, summary.measures = summary.measures, variance.method = "ic", working.msm = working.msm, gcomp = TRUE)
#Print the summary
summary(results_l, "tmle")
summary(results_l, "iptw")
summary(results_g, "gcomp")
bootCI_IPTW
quantile(PsiHat_gcomp_b, probs = c(0.025, .975))
PsiHat_gcomp_b
head(estimates)
plot(PsiHat_gcomp_b)
normalCI_TMLE_u <- estimates[,3] + 1.96*(sqrt(variance[3]))
#6. Use quantile function to obtain bootstrap CI
bootCI_TMLE <- quantile(estimates[,3], probs = c(0.025, .975))
bootCI_IPTW <- quantile(estimates[,2], probs = c(0.025, .975))
bootCI_Gcomp <- quantile(estimates[,1], probs = c(0.025, .975))
sqrt(32)
setwd("C:/Users/shell/Box Sync/242FinalProject")
setwd("~/Desktop/lizzyandshelley")
#set working directory
setwd("~/Desktop/lizzyandshelley") #LIZZY
#open packages
library(here)
library(foreign)
library(labelled)
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#load the data
df <- read.spss("Dataset", "Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#load the data
df <- read.spss(Dataset, "Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
setwd("~/Desktop/lizzyandshelley/Dataset")
#load the data
df <- read.spss("~/Desktop/lizzyandshelley/Dataset/"Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#set working directory
setwd("~/Desktop/lizzyandshelley/Dataset") #LIZZY
#open packages
library(here)
library(foreign)
library(labelled)
#load the data
df <- read.spss("Ricky.SAV", use.value.labels = TRUE, to.data.frame=TRUE)
#get variable labels
attr(df, "variable.labels")
df.labels <- as.data.frame(attr(df, "variable.labels"))
View(df.labels)
View(df.labels)
View(df.labels)
class(df.labels)
names(df.labels)
